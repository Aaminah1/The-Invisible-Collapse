/* Lamppost scene — scoped to avoid touching forest */
#lampsScene{
  position: relative;
  width: 100vw;
  min-height: 100vh;      /* full-screen pin */
  overflow: hidden;
  background: transparent;
  opacity: 0;
  transform: translateY(5vh);
  will-change: opacity, transform;
  z-index: 2;
}

#lampsGroundBase{
  position:absolute; left:0; bottom:0;
  width:100vw; z-index:4;
}

/* stacked ground fades (5→8) */
#lampsGroundStack{
  position:absolute; inset:0; z-index:3;
}
#lampsGroundStack img.ground{
  position:absolute; left:0; right:0; bottom:0;
  width:100vw; height:auto; object-fit:cover;
  opacity:0; will-change:opacity;
}

/* lampposts */
#lampsRow{
  position:absolute; inset:0; z-index:6; pointer-events:auto;
}
#lampsRow .lampWrap{
  position:absolute; bottom:0;
  transform:translateX(-50%);
  display:flex; align-items:flex-end;
  height:var(--lampH);                /* set via JS */
  transform-origin:bottom center;
}
#lampsRow .lamp{
  position:absolute; left:50%; bottom:0; transform:translateX(-50%);
  width:auto; max-height:100%;
  opacity:0;
  filter:drop-shadow(0 6px 16px rgba(0,0,0,.35));
}

/* Far parallax */
#parallaxFarStack{
  position:absolute; left:0; right:0; bottom:0;
  z-index:1; pointer-events:none;
  height:calc(100vw / var(--nearAR, 2.40));
}
#parallaxFarStack img{
  position:absolute; left:50%; bottom:0;
  transform:translateX(-50%);
  width:100%; height:auto;
  opacity:0; will-change:opacity, transform;
}

/* shared knob for size (mirrors your --forestSizeMult) */
:root{ --citySizeMult: 1.35; }

/* Near parallax sits above ground, below lamps */
#parallaxNearStack{
  position:absolute; left:0; right:0; bottom:0;
  z-index:2; pointer-events:none;
  height: calc(100vw / var(--nearAR, 2.40));
}
#parallaxNearStack img{
  position:absolute; left:50%; bottom:0;
  transform: translateX(-50%);
  width:100%; height:auto;
  opacity:0; will-change: opacity, transform;
}

/* stacking order reminder */
#lampsGroundBase  { z-index:1; }
#parallaxNearStack{ z-index:2; }
#lampsGroundStack { z-index:3; }

/* -------------------------------------------------
   Lamp click → ON/OFF visuals
   The glow/beam follow CSS variables we set from JS
--------------------------------------------------*/
.lampWrap{
  position: absolute;
  transform: translateX(-50%);
  /* defaults; JS will override per scene */
  --bx: 50%;   /* bulb center X */
  --by: 6%;    /* bulb top Y (relative to wrap) */
  --bw: 80px;  /* glow width  */
  --bh: 92px;  /* glow height */
  --beamW: 240px;
  --beamH: 300px;
  --beamY: 90px;    /* distance from bulb to beam start */
  --hue: 40deg;     /* 40° = warm lantern, 58°+ = cold streetlight */
  --glowOn: .95;    /* per-scene intensity controls */
  --beamOn: .85;
}

/* CLICKABLE AREA (geometry only; canvas handles click logic) */
.lampWrap .lamp-hit{
  position:absolute;
  left: calc(50% - var(--hitW, 110px)/2);
  top:  var(--hitTop, 200px);
  width: var(--hitW, 110px);
  height: var(--hitH, 65%);
  pointer-events: none; /* we only read its rect for hit testing on canvas */
}

/* base glow now supports oval shaping */
.lampWrap .lamp-glow{
  position:absolute;
  left: var(--bx,50%); top: var(--by,0%);
  width: var(--bw,80px); height: var(--bh,80px);
  transform: translate(-50%, -50%) scale(var(--gScaleX,1), var(--gScaleY,1));
  /* circle by default; streetlight will override with ellipse center lower */
  background: radial-gradient(closest-side,
              rgba(255,240,180,0.95), rgba(255,240,180,0) 70%);
  border-radius: 999px;
  filter: blur(2px);
  opacity: 0;
  pointer-events: none;
  z-index: 3;
  mix-blend-mode: screen;
}

/* cooler, oval glow for streetlight */
.lampWrap.isStreet .lamp-glow{
  /* put hotspot slightly below center so it hugs the hood */
  background: radial-gradient(ellipse at 50% 62%,
              hsla(var(--hue,200deg), 90%, 88%, 0.95) 0%,
              hsla(var(--hue,200deg), 80%, 70%, 0.50) 35%,
              hsla(var(--hue,200deg), 70%, 55%, 0.22) 60%,
              rgba(0,0,0,0) 80%);
}


/* default = cone beam */
.lampWrap .lamp-beam{
  position:absolute;
  left: var(--bx);
  top:  calc(var(--by) + var(--beamY));
  width: var(--beamW);
  height: var(--beamH);
  transform: translateX(-50%);
  pointer-events:none;
  opacity:0;
  background: radial-gradient(ellipse at 50% 0%,
              rgba(255,255,230,0.65) 0%,
              rgba(210,220,255,0.28) 32%,
              rgba(160,180,255,0.00) 78%);
  clip-path: polygon(50% 0%, 100% 100%, 0% 100%);
  mix-blend-mode: screen;
  filter: blur(1.5px);
  transition: opacity .18s linear;
  z-index: 2;
}

/* circle mode for the lantern (overrides cone) */
.lampWrap.isLantern .lamp-beam {
  width: var(--beamD, 220px);
  height: var(--beamD, 220px);
  border-radius: 50%;
  clip-path: none;
  background: radial-gradient(
    circle,
    rgba(255, 240, 180, 0.45) 0%,
    rgba(255, 240, 180, 0.18) 40%,
    rgba(255, 240, 180, 0.00) 70%
  );
  left: calc(var(--beamX, var(--bx)) + var(--bxpx, 0px));
  top:  calc(var(--by) + var(--beamYOffset, 0px));
  filter: blur(2px);
  opacity: 0;
}

/* ON state uses per-scene intensities */
#lampsScene .lampWrap.on .lamp-glow{ opacity: var(--glowOn, .95); }
#lampsScene .lampWrap.on .lamp-beam{ opacity: var(--beamOn, .85); }

/* brief startup flicker (only while .flicker is present) */
@keyframes lampFlicker {
  0%,100%{opacity:1}
  6%{opacity:.5}
  12%{opacity:1}
  20%{opacity:.55}
  33%{opacity:1}
  46%{opacity:.7}
  62%{opacity:1}
  78%{opacity:.6}
  90%{opacity:1}
}
#lampsScene .lampWrap.on.flicker .lamp-glow,
#lampsScene .lampWrap.on.flicker .lamp-beam{
  animation: lampFlicker 900ms linear infinite;
}

/* litter canvas */
#litterCanvas{
  position:absolute;
  inset:0;
  width:100%;
  height:100%;
  z-index:40;
  pointer-events:auto;
  isolation:isolate;
  cursor:default;
  transition: cursor 0.2s;
}
#litterCanvas.dragging { cursor: grabbing; }
